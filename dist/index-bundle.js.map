{"version":3,"file":"index-bundle.js","mappings":"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","sources":["webpack://breh.me/./src/seasons.ts","webpack://breh.me/webpack/bootstrap","webpack://breh.me/./src/index.ts"],"sourcesContent":["const snowFlakeShapes = [\n    // Snowflake shapes - 6-pointed stars with decorative details\n    {\n        path: 'M 15 0 L 15 30 M 0 15 L 30 15 M 4 4 L 26 26 M 26 4 L 4 26 M 15 5 L 12 8 L 18 8 Z M 15 25 L 12 22 L 18 22 Z M 5 15 L 8 12 L 8 18 Z M 25 15 L 22 12 L 22 18 Z',\n        width: 30,\n        height: 30\n    },\n    {\n        path: 'M 12 0 L 12 24 M 0 12 L 24 12 M 3 3 L 21 21 M 21 3 L 3 21 M 12 4 L 10 6 L 14 6 Z M 12 20 L 10 18 L 14 18 Z M 4 12 L 6 10 L 6 14 Z M 20 12 L 18 10 L 18 14 Z',\n        width: 24,\n        height: 24\n    },\n    {\n        path: 'M 16 0 L 16 32 M 0 16 L 32 16 M 5 5 L 27 27 M 27 5 L 5 27 M 16 6 L 13 9 L 19 9 Z M 16 26 L 13 23 L 19 23 Z M 6 16 L 9 13 L 9 19 Z M 26 16 L 23 13 L 23 19 Z',\n        width: 32,\n        height: 32\n    },\n    {\n        path: 'M 14 0 L 14 28 M 0 14 L 28 14 M 4 4 L 24 24 M 24 4 L 4 24 M 14 5 L 11 8 L 17 8 Z M 14 23 L 11 20 L 17 20 Z M 5 14 L 8 11 L 8 17 Z M 23 14 L 20 11 L 20 17 Z',\n        width: 28,\n        height: 28\n    },\n    {\n        path: 'M 13 0 L 13 26 M 0 13 L 26 13 M 3.5 3.5 L 22.5 22.5 M 22.5 3.5 L 3.5 22.5 M 13 4.5 L 10.5 7 L 15.5 7 Z M 13 21.5 L 10.5 19 L 15.5 19 Z M 4.5 13 L 7 10.5 L 7 15.5 Z M 21.5 13 L 19 10.5 L 19 15.5 Z',\n        width: 26,\n        height: 26\n    },\n]\nconst leafShapes = [\n    {\n        path: 'm3.707 21.707 2.967-2.967a7.533 7.533 0 0 0 4.2 1.23 8.886 8.886 0 0 0 6.332-2.763C21.019 13.4 21.958 3.51 22 3.09a1 1 0 0 0-.289-.8 1.013 1.013 0 0 0-.8-.289 45.808 45.808 0 0 0-5.7.961 1 1 0 0 0-.714.64l-.649 1.834-.539-1.085a1 1 0 0 0-1.219-.5 13.782 13.782 0 0 0-5.295 2.94c-3.571 3.571-3.216 8.066-1.535 10.535l-2.967 2.967a1 1 0 0 0 1.414 1.414zm4.5-13.5a10.7 10.7 0 0 1 3.705-2.164l1.192 2.4a.98.98 0 0 0 .957.557 1 1 0 0 0 .881-.665L16.2 4.791a46.16 46.16 0 0 1 3.66-.647c-.367 2.694-1.48 9.066-4.063 11.649-2.788 2.788-5.945 2.457-7.668 1.5l4.582-4.582a1 1 0 0 0-1.414-1.414l-4.586 4.578C5.751 14.151 5.42 11 8.207 8.207z',\n        width: 24,\n        height: 24\n    },\n    {\n        path: 'm3.707 21.707 2.967-2.967a7.533 7.533 0 0 0 4.2 1.23 8.888 8.888 0 0 0 6.332-2.763C21.02 13.4 21.958 3.509 22 3.09a1 1 0 0 0-.289-.8A1.028 1.028 0 0 0 20.91 2c-.419.038-10.3.976-14.117 4.789-3.569 3.573-3.214 8.068-1.533 10.537l-2.967 2.967a1 1 0 0 0 1.414 1.414zm4.5-13.5c2.584-2.583 8.956-3.7 11.65-4.063-.365 2.693-1.477 9.062-4.064 11.649C13 18.581 9.848 18.25 8.125 17.289l4.582-4.582a1 1 0 0 0-1.414-1.414l-4.581 4.581c-.961-1.723-1.292-4.88 1.495-7.667z',\n        width: 24,\n        height: 24\n    },\n    {\n        path: 'M21 2c-5.363 0-9.4 1.517-11.992 4.507-3.241 3.736-3.171 8.56-3.05 10.121l-3.665 3.665a1 1 0 0 0 1.414 1.414l3.724-3.724c2.045-.1 9.949-.739 11.5-4.612A65.031 65.031 0 0 0 21.98 3.2 1 1 0 0 0 21 2zm-3.929 10.629c-.694 1.735-4.262 2.73-7.432 3.146l3.067-3.067 4-4a1 1 0 1 0-1.414-1.414L13 9.586V9a1 1 0 0 0-2 0v2.586l-3.04 3.04A11.489 11.489 0 0 1 10.53 7.8c2-2.3 5.1-3.563 9.215-3.773a63.686 63.686 0 0 1-2.674 8.602z',\n        width: 24,\n        height: 24\n    }\n];\n\nclass Season {\n    constructor(name: string, months: number[], particles: ParticleSetting[]) {\n        this.name = name\n        this.months = months\n        this.particles = particles\n    }\n\n    name;\n    months;\n    particles;\n}\n\nclass ParticleSetting {\n    constructor(density: number, shapes: { path: string; width: number; height: number; }[], colors: string[]) {\n        this.density = density\n        this.shapes = shapes\n        this.colors = colors\n    }\n\n    density;\n    shapes;\n    colors\n}\n\nexport default {\n    spring: new Season('spring', [2, 3, 4], [\n        new ParticleSetting(30,\n            leafShapes,\n            [\n                '#90EE90', // Light green\n                '#98FB98', //Pale green\n                '#8FBC8F', // Dark sea green\n                '#3CB371', // Medium sea green\n                '#2E8B57', // Sea green\n                '#00FA9A'  // Medium spring green\n            ],\n        )\n\n    ]),\n    summer: new Season('summer', [5, 6, 7], [\n        new ParticleSetting(30,\n            leafShapes,\n            [\n                '#228B22', // Forest green\n                '#32CD32', // Lime green\n                '#00FF00', // Lime\n                '#7CFC00', // Lawn green\n                '#7FFF00', // Chartreuse\n                '#ADFF2F'  // Green yellow\n            ]\n        )\n\n    ]),\n    autumn: new Season('autumn', [8, 9, 10], [\n        new ParticleSetting(30,\n            leafShapes,\n            [\n                '#FF4500', // Orange red\n                '#FF6347', // Tomato\n                '#FF8C00', // Dark orange\n                '#FFA500', // Orange\n                '#FFD700', // Gold\n                '#DAA520', // Goldenrod\n                '#B8860B', // Dark goldenrod\n                '#8B4513'  // Saddle brown\n            ],\n        )\n\n    ]),\n    winter: new Season('winter', [11, 0, 1], [\n        new ParticleSetting(40,\n            snowFlakeShapes,\n            [\n                '#F0F8FF', // Alice blue\n                '#E0FFFF', // Light cyan\n                '#B0E0E6', // Powder blue\n                '#ADD8E6', // Light blue\n                '#87CEEB', // Sky blue\n                '#87CEFA'  // Light sky blue\n            ]\n        )\n\n    ]),\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import SEASONS from './seasons'\n\nconst today = new Date();\nconst month = today.getMonth();\n\n\nlet currentSeason;\nfor (const [name, season] of Object.entries(SEASONS)) {\n    if (season.months.includes(month)) {\n        currentSeason = season;\n        break;\n    }\n}\n\nconst spawnIntervalJitter = 15000; // Time between spawning new leaves in milliseconds\nconst referenceWindowArea = 1920 * 900;\nlet targetParticleCount = updateTargetParticleCount();\nconst particles = [];\n\nconsole.log(\"it is\", currentSeason.name)\n\n// Particle class to manage individual particle state and behavior\nclass Particle {\n    private element: HTMLElement;\n    private isDragging: boolean;\n    private x: number;\n    private y: number;\n    private hasStopped: boolean;\n    private rotation: number;\n    private scale: number;\n    private opacity: number;\n    private time: number;\n    private velocity: { x: number; y: number; rotationDirection: number; rotationSpeed: number };\n    private stopY: number;\n    private targetRotation: number;\n    \n    \n    constructor(element) {\n        this.element = element;\n        this.reset();\n        this.isDragging = false;\n    }\n\n    reset() {\n        if (particles.length > targetParticleCount) {\n            const index = particles.indexOf(this);\n            if (index > -1) {\n                particles.splice(index, 1);\n            }\n            this.element.remove();\n            return;\n        }\n\n        while (this.element.firstChild) {\n            this.element.removeChild(this.element.firstChild);\n        }\n        let particleSettings = currentSeason.particles[0];\n        const svg = createSvgElement(particleSettings.shapes, particleSettings.colors);\n        this.element.appendChild(svg);\n\n        this.x = Math.random() * (window.innerWidth - 50);\n        this.y = -10 - Math.random() * 30; // Start above the viewport\n        this.rotation = Math.random() * 360;\n        this.scale = 0.9;\n        this.opacity = 0.8;\n        this.time = 0;\n        let maxHSpeed = 40\n        this.velocity = {\n            x: -maxHSpeed / 2 + Math.random() * maxHSpeed,\n            y: 30 + Math.random() * 20,\n            rotationDirection: Math.random() < 0.5 ? -1 : 1,\n            rotationSpeed: 3 + Math.random() * 5\n        };\n\n        this.hasStopped = false;\n        const viewportHeight = window.innerHeight;\n        const bottomThreshold = viewportHeight * 0.85;\n        // Choose a random position in the bottom 20% to stop at\n        this.stopY = bottomThreshold + (Math.random() * viewportHeight * 0.12);\n        // Make sure we don't stop too close to the bottom\n        this.stopY = Math.min(this.stopY, viewportHeight * 0.9);\n        this.targetRotation = undefined;\n    }\n\n    update(deltaTime) {\n\n        deltaTime /= 1000;\n        this.time += deltaTime\n\n        let isStopping = false;\n        // If we're in the stopping phase and haven't reached the stop position\n        if (!this.isDragging && !this.hasStopped && this.y >= this.stopY) {\n            isStopping = true;\n\n            const deceleration = 50;\n            this.velocity.y -= deceleration * deltaTime;\n            this.velocity.y = Math.max(this.velocity.y, 0);\n\n            // Slow down horizontal movement\n            this.velocity.x *= 0.95;\n\n            // Check if we've stopped moving\n            if (this.velocity.y === 0) {\n                this.hasStopped = true;\n                this.velocity.x = 0;\n                this.velocity.rotationSpeed = 0;\n            }\n        }\n        if (isStopping) {\n            const currentRot = (this.rotation + 360) % 360;\n            if (!this.targetRotation) {\n                const FLAT_POSITIONS = [22, 79, 195, 247];\n                const STRAIGHT_STUCK_POS = 360 - 45\n                // Find the closest flat position\n                if (currentRot === STRAIGHT_STUCK_POS) {\n                    this.targetRotation = currentRot;\n                    this.velocity.rotationSpeed = 0;\n                    this.velocity.x = 0;\n                } else {\n                    this.targetRotation = FLAT_POSITIONS.reduce((closest, pos) => {\n                        const currentDiff = Math.abs((currentRot - closest + 180) % 360 - 180);\n                        const newDiff = Math.abs((currentRot - pos + 180) % 360 - 180);\n                        return newDiff < currentDiff ? pos : closest;\n                    });\n                    this.velocity.rotationSpeed = 80;\n                }\n            }\n\n            if (this.targetRotation) {\n                // Calculate rotation direction (shortest path)\n                let rotDir = (((this.targetRotation - currentRot) + 360) % 360) - 180;\n                this.velocity.rotationDirection = rotDir > 0 ? -1 : 1;\n            }\n        }\n\n        // If we're offscreen to the left or right, reset the particle\n        if (this.x < -50 || this.x > window.innerWidth + 50) {\n            this.reset();\n        }\n\n        if (!this.isDragging) {\n            // Update position\n            this.x += this.velocity.x * deltaTime;\n            this.y += this.velocity.y * deltaTime;\n        }\n        this.rotation += this.velocity.rotationSpeed * deltaTime * this.velocity.rotationDirection;\n\n        if (this.hasStopped) {\n            const scaleDecrease = 0.05;\n            this.scale = Math.max(0.3, this.scale - (scaleDecrease * deltaTime));\n            const fadeSpeed = 0.4;\n            this.opacity -= fadeSpeed * deltaTime\n            this.opacity = Math.max(0, this.opacity);\n\n            if (this.opacity === 0) {\n                this.reset();\n            }\n        }\n\n        let x = this.x - 20;\n        let y = this.y - 20;\n        // Apply transformations using CSS custom properties for better performance\n        this.element.style.setProperty('--x', `${round(x, 2)}px`);\n        this.element.style.setProperty('--y', `${round(y, 2)}px`);\n        this.element.style.setProperty('--opacity', `${round(this.opacity, 3)}`);\n        this.element.style.setProperty('--rotation', `${round(this.rotation)}deg`);\n        this.element.style.setProperty('--scale', `${round(this.scale, 3)}`);\n    }\n}\n\nfunction round(n, p = 0) {\n    return Math.round(n * Math.pow(10, p)) / Math.pow(10, p);\n}\n\nfunction createSvgElement(shapes, colors) {\n    const shape = shapes[Math.floor(Math.random() * shapes.length)];\n\n    // Create SVG element\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svg.setAttribute('width', shape.width);\n    svg.setAttribute('height', shape.height);\n    svg.setAttribute('viewBox', `0 0 ${shape.width} ${shape.height}`);\n\n    // Create defs and gradient\n    const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n    const gradientId = `gradient-${Math.random().toString(36).substr(2, 9)}`;\n    const gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');\n    gradient.setAttribute('id', gradientId);\n    gradient.setAttribute('x1', '0%');\n    gradient.setAttribute('y1', '0%');\n    gradient.setAttribute('x2', '100%');\n    gradient.setAttribute('y2', '100%');\n\n    // Add gradient stops\n    const stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n    stop1.setAttribute('offset', '0%');\n    let randomColor1 = colors[Math.floor(Math.random() * colors.length)];\n    stop1.setAttribute('stop-color', randomColor1);\n\n    const stop2 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n    stop2.setAttribute('offset', '100%');\n    let randomColor2 = colors[Math.floor(Math.random() * colors.length)];\n    stop2.setAttribute('stop-color', randomColor2);\n\n    gradient.appendChild(stop1);\n    gradient.appendChild(stop2);\n    defs.appendChild(gradient);\n    svg.appendChild(defs);\n\n    // Create path element\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttribute('d', shape.path);\n    path.setAttribute('fill', `url(#${gradientId})`);\n    path.setAttribute('stroke', randomColor1);\n\n    svg.appendChild(path);\n    return svg;\n}\n\nfunction spawnParticle() {\n    const particleElement = document.createElement('div');\n    particleElement.className = 'particle';\n\n    const particle = new Particle(particleElement);\n    document.body.appendChild(particleElement);\n    particles.push(particle);\n\n    // Add event listeners\n    particleElement.addEventListener('mousedown', (e) => onClickParticle(e, particle));\n\n    return particle;\n}\n\n\nfunction updateTargetParticleCount() {\n    let density = currentSeason.particles[0].density\n    return Math.round(density * (window.innerWidth * window.innerHeight) / referenceWindowArea);\n}\n\n\nfunction fillupParticles() {\n    targetParticleCount = updateTargetParticleCount();\n    let startCount = particles.length\n    if (targetParticleCount - startCount > 0) {\n        console.log(`Spawning ${targetParticleCount - startCount} particles`)\n        for (let i = startCount; i < targetParticleCount; i++) {\n            const jitter = Math.random() * spawnIntervalJitter;\n            setTimeout(spawnParticle, jitter);\n        }\n    }\n    setTimeout(fillupParticles, spawnIntervalJitter + 10)\n}\n\nfillupParticles();\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    let lastTime = 0;\n    let animationFrameId;\n\n    // Function to update all particles\n    function updateParticles(timestamp) {\n        if (!lastTime) lastTime = timestamp;\n        const deltaTime = timestamp - lastTime;\n        lastTime = timestamp;\n\n        for (const particle of particles) {\n            particle.update(deltaTime);\n        }\n\n        animationFrameId = requestAnimationFrame(updateParticles);\n    }\n\n    // Start the particle update loop\n    updateParticles(0);\n\n    // Clean up animation frame on page unload\n    window.addEventListener('beforeunload', () => {\n        if (animationFrameId) {\n            cancelAnimationFrame(animationFrameId);\n        }\n    });\n});\n\nfunction onClickParticle(e, particle) {\n    if (e.button !== 0) return; // Only left mouse button\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Store initial position and mouse offset\n    particle.isDragging = true;\n\n    function move(e) {\n        if (!particle.isDragging) return;\n\n        // Update position based on mouse position and initial offset\n        particle.x = e.clientX\n        particle.y = e.clientY\n        particle.element.classList.add('grabbed');\n    }\n\n    function stopDragging() {\n        particle.isDragging = false;\n        particle.element.classList.remove('grabbed');\n        document.removeEventListener('mousemove', move);\n        document.removeEventListener('mouseup', stopDragging);\n        document.removeEventListener('mouseleave', stopDragging);\n    }\n\n    document.addEventListener('mousemove', move);\n    document.addEventListener('mouseup', stopDragging);\n    document.addEventListener('mouseleave', stopDragging);\n}\n\n// Track last keys pressed for season detection\nlet keyBuffer = '';\n\nfunction handleKey(e) {\n    const resetBuffer = () => {\n        setTimeout(() => {\n            if (keyBuffer.length > 0) keyBuffer = '';\n        }, 1500); // Reset buffer after 1.5 seconds of inactivity\n    };\n\n    if (e.key.length === 1 && /[a-zA-Z]/.test(e.key)) {\n        keyBuffer += e.key.toLowerCase();\n        resetBuffer();\n        // Check if buffer matches any season name\n        const matchedName = Object.keys(SEASONS).find(season =>\n            season.startsWith(keyBuffer)\n        );\n\n        if (matchedName && keyBuffer === matchedName) {\n            if (currentSeason.name !== matchedName) {\n                currentSeason = SEASONS[matchedName];\n                console.log(`changed to ${matchedName}`);\n            }\n            keyBuffer = ''; // Reset buffer after successful match\n        } else if (!matchedName) {\n            keyBuffer = ''; // Reset buffer if no matching season\n        }\n    } else if (e.key === 'Escape') {\n        keyBuffer = ''; // Clear buffer on escape\n    }\n}\n\ndocument.addEventListener('keydown', handleKey);"],"names":["leafShapes","path","width","height","Season","constructor","name","months","particles","this","ParticleSetting","density","shapes","colors","spring","summer","autumn","winter","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","month","Date","getMonth","currentSeason","season","Object","entries","includes","targetParticleCount","updateTargetParticleCount","console","log","Particle","element","isDragging","x","y","hasStopped","rotation","scale","opacity","time","velocity","stopY","targetRotation","reset","length","index","indexOf","splice","remove","firstChild","removeChild","particleSettings","svg","shape","Math","floor","random","document","createElementNS","setAttribute","defs","gradientId","toString","substr","gradient","stop1","randomColor1","stop2","randomColor2","appendChild","createSvgElement","window","innerWidth","rotationDirection","rotationSpeed","viewportHeight","innerHeight","bottomThreshold","min","update","deltaTime","isStopping","deceleration","max","currentRot","FLAT_POSITIONS","reduce","closest","pos","currentDiff","abs","rotDir","scaleDecrease","fadeSpeed","style","setProperty","round","n","p","pow","spawnParticle","particleElement","createElement","className","particle","body","push","addEventListener","e","move","clientX","clientY","classList","add","stopDragging","removeEventListener","button","preventDefault","stopPropagation","onClickParticle","fillupParticles","startCount","i","jitter","setTimeout","spawnIntervalJitter","animationFrameId","lastTime","updateParticles","timestamp","requestAnimationFrame","cancelAnimationFrame","keyBuffer","key","test","toLowerCase","matchedName","keys","find","startsWith"],"sourceRoot":""}